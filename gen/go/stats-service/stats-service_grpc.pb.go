// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: stats-service/stats-service.proto

package statsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatisticServiceClient is the client API for StatisticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticServiceClient interface {
	// Метод для создания нового AI-сервиса
	Create(ctx context.Context, in *CreateAIServiceRequest, opts ...grpc.CallOption) (*CreateAIServiceResponse, error)
	// Метод вызова сервиса пользователем
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// Метод получения статистики
	GetCalls(ctx context.Context, in *GetCallsRequest, opts ...grpc.CallOption) (*GetCallsResponse, error)
}

type statisticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticServiceClient(cc grpc.ClientConnInterface) StatisticServiceClient {
	return &statisticServiceClient{cc}
}

func (c *statisticServiceClient) Create(ctx context.Context, in *CreateAIServiceRequest, opts ...grpc.CallOption) (*CreateAIServiceResponse, error) {
	out := new(CreateAIServiceResponse)
	err := c.cc.Invoke(ctx, "/stats.StatisticService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/stats.StatisticService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetCalls(ctx context.Context, in *GetCallsRequest, opts ...grpc.CallOption) (*GetCallsResponse, error) {
	out := new(GetCallsResponse)
	err := c.cc.Invoke(ctx, "/stats.StatisticService/GetCalls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticServiceServer is the server API for StatisticService service.
// All implementations must embed UnimplementedStatisticServiceServer
// for forward compatibility
type StatisticServiceServer interface {
	// Метод для создания нового AI-сервиса
	Create(context.Context, *CreateAIServiceRequest) (*CreateAIServiceResponse, error)
	// Метод вызова сервиса пользователем
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// Метод получения статистики
	GetCalls(context.Context, *GetCallsRequest) (*GetCallsResponse, error)
	mustEmbedUnimplementedStatisticServiceServer()
}

// UnimplementedStatisticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticServiceServer struct {
}

func (UnimplementedStatisticServiceServer) Create(context.Context, *CreateAIServiceRequest) (*CreateAIServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStatisticServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedStatisticServiceServer) GetCalls(context.Context, *GetCallsRequest) (*GetCallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalls not implemented")
}
func (UnimplementedStatisticServiceServer) mustEmbedUnimplementedStatisticServiceServer() {}

// UnsafeStatisticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticServiceServer will
// result in compilation errors.
type UnsafeStatisticServiceServer interface {
	mustEmbedUnimplementedStatisticServiceServer()
}

func RegisterStatisticServiceServer(s grpc.ServiceRegistrar, srv StatisticServiceServer) {
	s.RegisterService(&StatisticService_ServiceDesc, srv)
}

func _StatisticService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAIServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.StatisticService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).Create(ctx, req.(*CreateAIServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.StatisticService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.StatisticService/GetCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetCalls(ctx, req.(*GetCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticService_ServiceDesc is the grpc.ServiceDesc for StatisticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.StatisticService",
	HandlerType: (*StatisticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StatisticService_Create_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _StatisticService_Call_Handler,
		},
		{
			MethodName: "GetCalls",
			Handler:    _StatisticService_GetCalls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats-service/stats-service.proto",
}
